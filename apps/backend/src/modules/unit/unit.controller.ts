import { Request, Response } from 'express';
import * as unitService from './unit.service';
import { z } from 'zod';

const createUnitSchema = z.object({
  propertyId: z.string().uuid(),
  unitTypeId: z.string().uuid(),
  unitNumber: z.string(),
  rentAmount: z.number().positive(),
  squareFootage: z.number().positive().optional(),
  numberOfBedrooms: z.number().int().positive().optional(),
  numberOfBathrooms: z.number().int().positive().optional(),
});

const updateUnitSchema = z.object({
  propertyId: z.string().uuid().optional(),
  unitTypeId: z.string().uuid().optional(),
  unitNumber: z.string().optional(),
  rentAmount: z.number().positive().optional(),
  squareFootage: z.number().positive().optional(),
  numberOfBedrooms: z.number().int().positive().optional(),
  numberOfBathrooms: z.number().int().positive().optional(),
});

export async function getAllUnits(req: Request, res: Response) {
  try {
    const units = await unitService.findAllUnits();
    res.json(units);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve units' });
  }
}

export async function createUnit(req: Request, res: Response) {
  try {
    const validatedData = createUnitSchema.parse(req.body);
    // Map validatedData to Unit type
    const unitData = {
      id: '', // id will be generated by DB
      name: validatedData.unitNumber,
      updatedAt: new Date(),
      unit_type_id: validatedData.unitTypeId,
      parent_property_id: validatedData.propertyId,
      address: null,
      description: null,
      createdAt: new Date(),
      market_rent: validatedData.rentAmount.toString(),
      future_market_rent: null,
      effective_date: null,
      application_fee: null,
      estimate_turn_over_cost: null,
      is_cat_allowed: false,
      is_dog_allowed: false,
      is_smoking_allowed: false,
      marketing_title: null,
      marketing_description: null,
      marketing_youtube_url: null,
      bed_rooms: validatedData.numberOfBedrooms ?? null,
      bath_rooms: validatedData.numberOfBathrooms ?? null,
      square_feet: validatedData.squareFootage ?? null,
      virtual_showing_available: false,
      utility_bills: false,
      utility_bills_date: null,
      lock_box: null,
      non_revenues_status: false,
      balance: null,
      total_charges: null,
      total_credit: null,
      due_amount: null,
      total_payable: null,
    };
    const newUnit = await unitService.createUnit(unitData);
    res.status(201).json(newUnit);
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to create unit' });
    }
  }
}

export async function getUnitById(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const unit = await unitService.findUnitById(id);
    if (unit) {
      res.json(unit);
    } else {
      res.status(404).json({ error: 'Unit not found' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve unit' });
  }
}

export async function updateUnit(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const validatedData = updateUnitSchema.parse(req.body);
    // Map validatedData to partial Unit type
    const unitData: Partial<any> = {};
    if (validatedData.unitNumber !== undefined) unitData.name = validatedData.unitNumber;
    if (validatedData.unitTypeId !== undefined) unitData.unit_type_id = validatedData.unitTypeId;
    if (validatedData.propertyId !== undefined) unitData.parent_property_id = validatedData.propertyId;
    if (validatedData.rentAmount !== undefined) unitData.market_rent = validatedData.rentAmount.toString();
    if (validatedData.numberOfBedrooms !== undefined) unitData.bed_rooms = validatedData.numberOfBedrooms;
    if (validatedData.numberOfBathrooms !== undefined) unitData.bath_rooms = validatedData.numberOfBathrooms;
    if (validatedData.squareFootage !== undefined) unitData.square_feet = validatedData.squareFootage;
    const updatedUnit = await unitService.updateUnit(id, unitData);
    if (updatedUnit) {
      res.json(updatedUnit);
    } else {
      res.status(404).json({ error: 'Unit not found' });
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to update unit' });
    }
  }
}

export async function deleteUnit(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const deleted = await unitService.deleteUnit(id);
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ error: 'Unit not found' });
    }
  } catch (error) {
    res.status(500).json({ error: (error as Error).message });
  }
}
