import { Request, Response } from 'express';
import * as unitTypeService from './unit_type.service';
import { z } from 'zod';

const createUnitTypeSchema = z.object({
  name: z.string(),
});

const updateUnitTypeSchema = z.object({
  name: z.string().optional(),
});

export async function getAllUnitTypes(req: Request, res: Response) {
  try {
    const unitTypes = await unitTypeService.findAllUnitTypes();
    res.json(unitTypes);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve unit types' });
  }
}

export async function createUnitType(req: Request, res: Response) {
  try {
    const validatedData = createUnitTypeSchema.parse(req.body);
    // Map validatedData to UnitType type
    const unitTypeData = {
      id: '', // id will be generated by DB
      name: validatedData.name,
      updatedAt: new Date(),
      parent_property_id: '', // or null if optional
      is_cat_allowed: false,
      is_dog_allowed: false,
      is_smoking_allowed: false,
      marketing_title: null,
      marketing_description: null,
      marketing_youtube_url: null,
      createdAt: new Date(),
    };
    const newUnitType = await unitTypeService.createUnitType(unitTypeData);
    res.status(201).json(newUnitType);
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to create unit type' });
    }
  }
}

export async function getUnitTypeById(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const unitType = await unitTypeService.findUnitTypeById(id);
    if (unitType) {
      res.json(unitType);
    } else {
      res.status(404).json({ error: 'Unit type not found' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve unit type' });
  }
}

export async function updateUnitType(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const validatedData = updateUnitTypeSchema.parse(req.body);
    // Map validatedData to partial UnitType type
    const unitTypeData: Partial<any> = {};
    if (validatedData.name !== undefined) unitTypeData.name = validatedData.name;
    const updatedUnitType = await unitTypeService.updateUnitType(id, unitTypeData);
    if (updatedUnitType) {
      res.json(updatedUnitType);
    } else {
      res.status(404).json({ error: 'Unit type not found' });
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to update unit type' });
    }
  }
}

export async function deleteUnitType(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const deleted = await unitTypeService.deleteUnitType(id);
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ error: 'Unit type not found' });
    }
  } catch (error) {
    res.status(500).json({ error: (error as Error).message });
  }
}
