import { Request, Response } from 'express';
import * as leaseService from './lease.service';
import { z } from 'zod';

const createLeaseSchema = z.object({
  unitId: z.string().uuid(),
  tenantId: z.string().uuid(),
  startDate: z.string().datetime(),
  endDate: z.string().datetime(),
  rentAmount: z.number().positive(),
});

const updateLeaseSchema = z.object({
  unitId: z.string().uuid().optional(),
  tenantId: z.string().uuid().optional(),
  startDate: z.string().datetime().optional(),
  endDate: z.string().datetime().optional(),
  rentAmount: z.number().positive().optional(),
});

export async function getAllLeases(req: Request, res: Response) {
  try {
    const leases = await leaseService.findAllLeases();
    res.json(leases);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve leases' });
  }
}

export async function createLease(req: Request, res: Response) {
  try {
    const validatedData = createLeaseSchema.parse(req.body);
    // Map validatedData to Lease type with best-effort assumptions
    const leaseData = {
      id: '', // id will be generated by DB
      updatedAt: new Date().toISOString(),
      rental_application_id: '', // or null if optional
      lease_type: 'STANDARD' as any, // cast to LeaseType to satisfy type
      start_date: validatedData.startDate,
      end_date: validatedData.endDate,
      rent_cycle: 'MONTHLY' as any, // cast to RentCycleChoices to satisfy type
      rent_amount: validatedData.rentAmount.toString(),
      unit_id: validatedData.unitId,
      tenant_id: validatedData.tenantId,
      status: 'ACTIVE' as 'ACTIVE' | 'CLOSED', // cast to satisfy type
      description: null,
      createdAt: new Date().toISOString(),
      releasing_policies: [],
      final_statement: null,
      amount: '0',
      gl_account: '',
      due_date: new Date().toISOString(),
      rules_and_policies: [],
      final_statement_date: null,
      final_statement_amount: '0',
      condition_of_premises: [],
      conditions_of_moving_out: [],
    };
    const newLease = await leaseService.createLease(leaseData);
    res.status(201).json(newLease);
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to create lease' });
    }
  }
}

export async function getLeaseById(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const lease = await leaseService.findLeaseById(id);
    if (lease) {
      res.json(lease);
    } else {
      res.status(404).json({ error: 'Lease not found' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve lease' });
  }
}

export async function updateLease(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const validatedData = updateLeaseSchema.parse(req.body);
    // Map validatedData to partial Lease type
    const leaseData: Partial<any> = {};
    if (validatedData.unitId !== undefined) leaseData.unit_id = validatedData.unitId;
    if (validatedData.tenantId !== undefined) leaseData.tenant_id = validatedData.tenantId;
    if (validatedData.startDate !== undefined) leaseData.start_date = validatedData.startDate;
    if (validatedData.endDate !== undefined) leaseData.end_date = validatedData.endDate;
    if (validatedData.rentAmount !== undefined) leaseData.rent_amount = validatedData.rentAmount;
    const updatedLease = await leaseService.updateLease(id, leaseData);
    if (updatedLease) {
      res.json(updatedLease);
    } else {
      res.status(404).json({ error: 'Lease not found' });
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      res.status(400).json({ errors: error.errors });
    } else {
      res.status(500).json({ error: 'Failed to update lease' });
    }
  }
}

export async function deleteLease(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const deleted = await leaseService.deleteLease(id);
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ error: 'Lease not found' });
    }
  } catch (error) {
    res.status(500).json({ error: (error as Error).message });
  }
}
